import { Directive } from '@angular/core';
import { FormArray } from '@angular/forms';
import { FieldType } from './field.type';
import { clone, assignFieldValue, getFieldValue, hasKey } from '../utils';
import { registerControl, unregisterControl, findControl } from '../extensions/field-form/utils';
import * as i0 from "@angular/core";
export class FieldArrayType extends FieldType {
    onPopulate(field) {
        if (hasKey(field)) {
            const control = findControl(field);
            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));
        }
        field.fieldGroup = field.fieldGroup || [];
        const length = Array.isArray(field.model) ? field.model.length : 0;
        if (field.fieldGroup.length > length) {
            for (let i = field.fieldGroup.length - 1; i >= length; --i) {
                unregisterControl(field.fieldGroup[i], true);
                field.fieldGroup.splice(i, 1);
            }
        }
        for (let i = field.fieldGroup.length; i < length; i++) {
            const f = { ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray) };
            if (f.key !== null) {
                f.key = `${i}`;
            }
            field.fieldGroup.push(f);
        }
    }
    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {
        i = i == null ? this.field.fieldGroup.length : i;
        if (!this.model) {
            assignFieldValue(this.field, []);
        }
        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
        this.markFieldForCheck(this.field.fieldGroup[i]);
        this._build();
        markAsDirty && this.formControl.markAsDirty();
    }
    remove(i, { markAsDirty } = { markAsDirty: true }) {
        this.model.splice(i, 1);
        const field = this.field.fieldGroup[i];
        this.field.fieldGroup.splice(i, 1);
        this.field.fieldGroup.forEach((f, key) => this.updateArrayElementKey(f, `${key}`));
        unregisterControl(field, true);
        this._build();
        markAsDirty && this.formControl.markAsDirty();
    }
    _build() {
        const fields = this.field.formControl._fields ?? [this.field];
        fields.forEach((f) => this.options.build(f));
        this.options.fieldChanges.next({
            field: this.field,
            value: getFieldValue(this.field),
            type: 'valueChanges',
        });
    }
    updateArrayElementKey(f, newKey) {
        if (hasKey(f)) {
            f.key = newKey;
            return;
        }
        if (!f.fieldGroup?.length) {
            return;
        }
        for (let i = 0; i < f.fieldGroup.length; i++) {
            this.updateArrayElementKey(f.fieldGroup[i], newKey);
        }
    }
    markFieldForCheck(f) {
        if (!f) {
            return;
        }
        f.fieldGroup?.forEach((c) => this.markFieldForCheck(c));
        if (f.hide === false) {
            this.options._hiddenFieldsForCheck.push(f);
        }
    }
}
FieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });
FieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.12", type: FieldArrayType, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FieldArrayType, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,